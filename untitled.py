# -*- coding: utf-8 -*-
""".ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KNBT9K9tlbRUb2SrH8e5LfwVBsWUkFrO
"""

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from feature_engine.discretisation import EqualWidthDiscretiser
from feature_engine.encoding import OneHotEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.ensemble import RandomForestRegressor



flight_data = pd.read_csv('/content/flight_dataset.csv')

flight_data.info()

flight_data.head()

flight_data.describe(include='all')

flight_data.isnull().sum()

flight_eda = flight_data.copy()

fig, ax = plt.subplots(3, 4, figsize=(12, 9))
ax = ax.flatten()

for i, col in enumerate(num_cols_eda):
    flight_eda.boxplot(col, ax=ax[i])

for i in range(len(num_cols_eda),12):
    ax[i].axis('off')

plt.tight_layout()
plt.show()

colormap = plt.cm.viridis
plt.figure(figsize=(12,12))
plt.title('Pearson Correlation of Features', size=12)
ax = sns.heatmap(flight_eda[num_cols_eda].corr(), cmap=colormap, annot=True, vmin=-1, vmax=1)
plt.show()

cat_cols_eda = [c for c in flight_eda.columns if flight_eda[c].dtypes=='O']

fig, ax = plt.subplots(1, 3, figsize=(12, 3))
ax = ax.flatten()

for i, col in enumerate(cat_cols_eda):
    sns.countplot(x=col, data=flight_eda, ax=ax[i])
    plt.ylabel('Count')
    ax[i].tick_params(axis='x', rotation=45, labelsize=8.5)

plt.tight_layout()
plt.show()

flight_data = flight_data.drop(columns=['Year'])

flight_data['Source_Destination'] = flight_data['Source'] + ' ' + flight_data['Destination']
flight_data = flight_data.drop(columns=['Source','Destination'])

def calculate_duration(dep_hours, dep_min, arr_hours, arr_min):
    dep_total_minutes = dep_hours * 60 + dep_min
    arr_total_minutes = arr_hours * 60 + arr_min

    if arr_total_minutes < dep_total_minutes:
        arr_total_minutes += 24 * 60

    duration_minutes = arr_total_minutes - dep_total_minutes
    return duration_minutes

flight_data['Duration_minutes'] = flight_data.apply(
    lambda row: calculate_duration(row['Dep_hours'], row['Dep_min'], row['Arrival_hours'], row['Arrival_min']),
    axis=1
)

flight_data['Duration'] = flight_data['Duration_minutes'] / 60
flight_data = flight_data.drop(columns=['Duration_hours','Duration_min'])

def categorize_hour(hour):
    if 5 <= hour < 12:
        return 'Morning'
    elif 12 <= hour < 17:
        return 'Afternoon'
    elif 17 <= hour < 21:
        return 'Evening'
    elif 21 <= hour <= 23 or 0 <= hour < 5:
        return 'Night'
    else:
        return 'Invalid Hour'

flight_data['Departure_Time'] = flight_data['Dep_hours'].apply(categorize_hour)
flight_data['Arrival_Time'] = flight_data['Arrival_hours'].apply(categorize_hour)
flight_data = flight_data.drop(columns=['Dep_hours','Dep_min','Arrival_hours','Arrival_min'])

flight_data.drop_duplicates(inplace = True)

flight_data.head()

X_train, X_test, y_train, y_test = train_test_split(
    flight_data.drop('Price', axis=1), flight_data['Price'], test_size=0.2, random_state=69)

X_train.shape, X_test.shape

y_train.shape, y_test.shape

ewq_disc = EqualWidthDiscretiser(bins=3, variables = ['Date','Month'])
ewq_disc.fit(X_train)

ewq_disc.binner_dict_

X_train = ewq_disc.transform(X_train)
X_test = ewq_disc.transform(X_test)

t1 = X_train.groupby(['Date'])['Date'].count() / len(X_train)
t2 = X_test.groupby(['Date'])['Date'].count() / len(X_test)

tmp = pd.concat([t1, t2], axis=1)
tmp.columns = ['Train', 'Test']
tmp.plot.bar()
plt.xticks(rotation=0)
plt.ylabel('Number of observations per bin')

t1 = X_train.groupby(['Month'])['Month'].count() / len(X_train)
t2 = X_test.groupby(['Month'])['Month'].count() / len(X_test)

tmp = pd.concat([t1, t2], axis=1)
tmp.columns = ['Train', 'Test']
tmp.plot.bar()
plt.xticks(rotation=0)
plt.ylabel('Number of observations per bin')

X_train[['Date','Month']] = X_train[['Date','Month']].astype(object)
X_test[['Date','Month']] = X_test[['Date','Month']].astype(object)

ohe_enc = OneHotEncoder(
    top_categories=None,
    variables=['Airline','Source_Destination','Departure_Time','Arrival_Time','Month','Date'],
    drop_last=False)
ohe_enc.fit(X_train)

!pip install scikit-learn
from sklearn.preprocessing import OneHotEncoder

ohe_enc = OneHotEncoder(
    top_categories=None,
    variables=['Airline','Source_Destination','Departure_Time','Arrival_Time','Month','Date'],
    drop_last=False)
ohe_enc.fit(X_train)

X_train = ohe_enc.transform(X_train)
X_test = ohe_enc.transform(X_test)

X_train.head()

X_test.head()

plt.figure(figsize=(10, 10))
plt.title('Before Scaling')
plt.xlabel('Values')
for col in X_train.columns:
    sns.kdeplot(X_train[col], label=col)
plt.legend()
plt.show()

scaler = StandardScaler()

for col in X_train.columns:
    X_train[col] = scaler.fit_transform(X_train[[col]])
    X_test[col] = scaler.transform(X_test[[col]])

plt.figure(figsize=(10, 10))
plt.title('After Scaling')
plt.xlabel('Values')
for col in X_train.columns:
    sns.kdeplot(X_train[col], label=col)
plt.legend()
plt.show()

model_linear_regression = LinearRegression()
model_linear_regression.fit(X_train, y_train)
print('train_mse:', mean_squared_error(y_train, model_linear_regression.predict(X_train)),
      '\n test_mse:', mean_squared_error(y_test, model_linear_regression.predict(X_test)))
print('train_r-sq:', r2_score(y_train, model_linear_regression.predict(X_train)),
      '\n test_r-sq:', r2_score(y_test, model_linear_regression.predict(X_test)))

rfr = RandomForestRegressor(n_estimators=3,random_state=69, min_samples_split=2)
rfr.fit(X_train, y_train)
print('train_mse:', mean_squared_error(y_train, rfr.predict(X_train)),
      '\n test_mse:', mean_squared_error(y_test, rfr.predict(X_test)))
print('train_r-sq:', r2_score(y_train,rfr.predict(X_train)),
      '\n test_r-sq:', r2_score(y_test, rfr.predict(X_test)))